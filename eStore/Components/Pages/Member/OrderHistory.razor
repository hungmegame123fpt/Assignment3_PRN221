<h3 class="page-title">Order History</h3>
@page "/orderhistory"
@using DataAccess.Models
@using BusinessObject.IService
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization

@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="order-history-container">
    @if (orders == null)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading your orders...</p>
        </div>
    }
    else if (!orders.Any())
    {
        <div class="empty-state">
            <i class="fas fa-box-open empty-icon"></i>
            <h4>No orders found</h4>
            <p>You haven't placed any orders yet.</p>
        </div>
    }
    else
    {
        <div class="order-grid">
            @foreach (var order in orders)
            {
                <div class="order-card">
                    <div class="order-header">
                        <h5>Order #@order.OrderId</h5>
                        <span class="order-status @GetStatusClass(order)">@GetStatusText(order)</span>
                    </div>
                    <div class="order-details">
                        <div class="detail-row">
                            <span class="detail-label">Order Date:</span>
                            <span class="detail-value">@order.OrderDate.ToString("MMM dd, yyyy")</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Required Date:</span>
                            <span class="detail-value">@order.RequiredDate.ToString("MMM dd, yyyy")</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Shipped Date:</span>
                            <span class="detail-value">@(order.ShippedDate?.ToString("MMM dd, yyyy") ?? "Processing")</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Freight:</span>
                            <span class="detail-value">$@order.Freight?.ToString("F2")</span>
                        </div>
                    </div>
                    <button class="view-details-btn" @onclick="() => NavigateToDetails(order.OrderId)">
                        <i class="fas fa-eye"></i> View Details
                    </button>
                </div>
            }
        </div>
    }
</div>

<style>
    /* Main container styling */
    .order-history-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .page-title {
        text-align: center;
        color: #2c3e50;
        margin-bottom: 2rem;
        font-weight: 600;
    }

    /* Loading state */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 200px;
        color: #7f8c8d;
    }

        .loading-container p {
            margin-top: 1rem;
        }

    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 3rem 0;
        color: #7f8c8d;
    }

    .empty-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        color: #bdc3c7;
    }

    .empty-state h4 {
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }

    /* Order grid layout */
    .order-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-top: 1rem;
    }

    /* Order card styling */
    .order-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        display: flex;
        flex-direction: column;
    }

        .order-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.12);
        }

    .order-header {
        padding: 1.25rem 1.5rem 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #eee;
        padding-bottom: 1rem;
    }

        .order-header h5 {
            margin: 0;
            color: #2c3e50;
            font-size: 1.1rem;
        }

    .order-status {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-weight: 600;
        text-transform: uppercase;
    }

        .order-status.shipped {
            background-color: #d4edda;
            color: #155724;
        }

        .order-status.processing {
            background-color: #fff3cd;
            color: #856404;
        }

        .order-status.pending {
            background-color: #e2e3e5;
            color: #383d41;
        }

    /* Order details */
    .order-details {
        padding: 1.5rem;
        flex-grow: 1;
    }

    .detail-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.75rem;
    }

    .detail-label {
        color: #7f8c8d;
        font-weight: 500;
    }

    .detail-value {
        color: #2c3e50;
        font-weight: 600;
    }

    /* Button styling */
    .view-details-btn {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 0.75rem;
        width: 100%;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

        .view-details-btn:hover {
            background-color: #2980b9;
        }

        .view-details-btn i {
            font-size: 0.9rem;
        }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .order-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private IEnumerable<Order> orders;
    private string debugMemberId = "Not set";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var memberIdClaim = user.FindFirst("MemberId")?.Value;
            if (int.TryParse(memberIdClaim, out int memberId))
            {
                debugMemberId = memberId.ToString();
                orders = await GetOrdersByMemberId(memberId);
            }
            else
            {
                debugMemberId = "Failed to parse MemberId";
                orders = new List<Order>();
            }
        }
        else
        {
            debugMemberId = "User not authenticated";
            orders = new List<Order>();
        }
    }

    private async Task<IEnumerable<Order>> GetOrdersByMemberId(int memberId)
    {
        return await Task.Run(() => OrderService.GetOrdersByMemberId(memberId));
    }

    private void NavigateToDetails(int orderId)
    {
        NavigationManager.NavigateTo($"/order/{orderId}");
    }

    private string GetStatusClass(Order order)
    {
        if (order.ShippedDate.HasValue)
            return "shipped";
        if (DateTime.Now > order.RequiredDate)
            return "pending";
        return "processing";
    }

    private string GetStatusText(Order order)
    {
        if (order.ShippedDate.HasValue)
            return "Shipped";
        if (DateTime.Now > order.RequiredDate)
            return "Pending";
        return "Processing";
    }
}