@page "/Profile"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using DataAccess.Models
@using BusinessObject.IService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@inject NavigationManager Navigation
@inject IMemberService userService

<style>
    /* Main container styling */
    .profile-page {
        background-color: #f8fafc;
        min-height: 100vh;
        padding: 2rem 1rem;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }

    /* Profile title */
    .profile-title {
        font-size: 2.25rem;
        font-weight: 700;
        color: #1e293b;
        text-align: center;
        margin-bottom: 1.5rem;
        position: relative;
        display: inline-block;
        width: 100%;
    }

        .profile-title::after {
            content: '';
            display: block;
            width: 80px;
            height: 4px;
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            margin: 0.5rem auto 0;
            border-radius: 2px;
        }

    /* Profile card container */
    .profile-container {
        max-width: 600px;
        margin: 0 auto;
        animation: fadeIn 0.5s ease-out;
    }

    /* Profile card */
    .profile-card {
        background: white;
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .profile-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        }

    /* Profile header */
    .profile-header {
        background: linear-gradient(135deg, #3b82f6, #6366f1);
        color: white;
        padding: 2rem;
        text-align: center;
        position: relative;
    }

    .profile-avatar {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        background-color: white;
        margin: 0 auto 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2.5rem;
        font-weight: 600;
        color: #3b82f6;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .profile-email {
        font-size: 1.25rem;
        font-weight: 500;
        margin: 0.5rem 0 0;
    }

    /* Profile content */
    .profile-content {
        padding: 2rem;
    }

    /* Details view */
    .profile-details {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }

    .detail-item {
        display: flex;
        align-items: flex-start;
    }

    .detail-icon {
        margin-right: 1rem;
        color: #64748b;
        font-size: 1.25rem;
        min-width: 24px;
    }

    .detail-text {
        flex: 1;
    }

    .detail-label {
        font-size: 0.875rem;
        color: #64748b;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 0.25rem;
    }

    .detail-value {
        font-size: 1.125rem;
        color: #1e293b;
        font-weight: 500;
    }

    /* Edit button */
    .edit-button {
        display: block;
        width: 100%;
        padding: 0.875rem;
        margin-top: 2rem;
        background-color: #3b82f6;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: 0 2px 5px rgba(59, 130, 246, 0.2);
    }

        .edit-button:hover {
            background-color: #2563eb;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
        }

        .edit-button:active {
            transform: translateY(0);
        }

    /* Edit form */
    .profile-edit-form {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-label {
        font-size: 0.875rem;
        color: #64748b;
        font-weight: 500;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .form-input {
        padding: 0.875rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 1rem;
        color: #1e293b;
        background-color: #f8fafc;
        transition: all 0.2s ease;
    }

        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            background-color: white;
        }

    .form-actions {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }

    .save-button {
        flex: 1;
        padding: 0.875rem;
        background-color: #10b981;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .save-button:hover {
            background-color: #059669;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);
        }

    .cancel-button {
        flex: 1;
        padding: 0.875rem;
        background-color: #f1f5f9;
        color: #64748b;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .cancel-button:hover {
            background-color: #e2e8f0;
            transform: translateY(-2px);
        }

    /* Loading state */
    .loading-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 3rem;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 4px solid #e2e8f0;
        border-top-color: #3b82f6;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }

    .loading-text {
        font-size: 1rem;
        color: #64748b;
        font-weight: 500;
    }

    /* Animations */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 640px) {
        .profile-title {
            font-size: 1.75rem;
        }

        .profile-header {
            padding: 1.5rem;
        }

        .profile-content {
            padding: 1.5rem;
        }
    }
</style>

<div class="profile-page">
    <div class="profile-container">
        <h1 class="profile-title">My Profile</h1>

        @if (member != null)
        {
            <div class="profile-card">
                <div class="profile-header">
                    <div class="profile-avatar">
                        @member.Email[0].ToString().ToUpper()
                    </div>
                    <h2 class="profile-email">@member.Email</h2>
                </div>

                <div class="profile-content">
                    @if (isEditing)
                    {
                        <div class="profile-edit-form">
                            <div class="form-group">
                                <label class="form-label" for="company">Company</label>
                                <input class="form-input" type="text" id="company" @bind="member.CompanyName" />
                            </div>

                            <div class="form-group">
                                <label class="form-label" for="city">City</label>
                                <input class="form-input" type="text" id="city" @bind="member.City" />
                            </div>

                            <div class="form-group">
                                <label class="form-label" for="country">Country</label>
                                <input class="form-input" type="text" id="country" @bind="member.Country" />
                            </div>

                            <div class="form-actions">
                                <button class="save-button" @onclick="SaveChanges">Save Changes</button>
                                <button class="cancel-button" @onclick="CancelEdit">Cancel</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="profile-details">
                            <div class="detail-item">
                                <span class="detail-icon">🏢</span>
                                <div class="detail-text">
                                    <div class="detail-label">Company</div>
                                    <div class="detail-value">@(member.CompanyName ?? "Not specified")</div>
                                </div>
                            </div>

                            <div class="detail-item">
                                <span class="detail-icon">🏙️</span>
                                <div class="detail-text">
                                    <div class="detail-label">City</div>
                                    <div class="detail-value">@(member.City ?? "Not specified")</div>
                                </div>
                            </div>

                            <div class="detail-item">
                                <span class="detail-icon">🌎</span>
                                <div class="detail-text">
                                    <div class="detail-label">Country</div>
                                    <div class="detail-value">@(member.Country ?? "Not specified")</div>
                                </div>
                            </div>

                            <button class="edit-button" @onclick="EditProfile">
                                Edit Profile
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <div class="loading-text">Loading your profile...</div>
            </div>
        }
    </div>
</div>

@code {
    private Member? member;
    private bool isEditing = false;
    private CancellationTokenSource cts = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (!user.Identity.IsAuthenticated)
            {
                Navigation.NavigateTo("/Login");
                return;
            }

            int memberId = int.Parse(user.FindFirst(c => c.Type == "MemberId")?.Value ?? "1");

            if (!cts.Token.IsCancellationRequested)
            {
                member = await userService.GetMemberById(memberId);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching member data: {ex.Message}");
        }
    }

    private void EditProfile()
    {
        isEditing = true;
    }

    private async Task SaveChanges()
    {
        if (member != null)
        {
            try
            {
                await userService.UpdateMember(member);
                isEditing = false;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving changes: {ex.Message}");
            }
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}