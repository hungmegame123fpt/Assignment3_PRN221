@page "/register"
@inject BusinessObject.IService.IMemberService MemberService
@inject NavigationManager NavigationManager
@using DataAccess.Models

<style>
    /* Main container styling */
    .register-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Page title styling */
    .page-title {
        font-size: 2.25rem;
        font-weight: 600;
        color: #2c3e50;
        text-align: center;
        margin-bottom: 1.5rem;
        position: relative;
    }

        .page-title::after {
            content: '';
            display: block;
            width: 80px;
            height: 4px;
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            margin: 0.75rem auto 0;
            border-radius: 2px;
        }

    /* Form container */
    .form-container {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        padding: 2rem;
    }

    /* Form styling */
    .form-label {
        font-weight: 600;
        color: #2c3e50;
    }

    .form-control {
        margin-bottom: 1rem;
        padding: 0.75rem;
        border-radius: 8px;
        border: 1px solid #e2e8f0;
        font-size: 1rem;
        color: #2c3e50;
    }

        .form-control:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
        }

    .btn-primary {
        display: inline-flex;
        align-items: center;
        padding: 0.75rem 1.5rem;
        background-color: #3b82f6;
        color: white;
        border-radius: 8px;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.2s ease;
        box-shadow: 0 2px 5px rgba(59, 130, 246, 0.2);
        border: none;
        width: 100%;
        justify-content: center;
    }

        .btn-primary:hover {
            background-color: #2563eb;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
        }

        .btn-primary:active {
            transform: translateY(0);
        }

    .alert-dismissible .btn-close {
        position: absolute;
        top: 0.75rem;
        right: 1rem;
        color: inherit;
    }

    .loading-text {
        color: #718096;
        font-style: italic;
        text-align: center;
        margin: 50px 0;
        font-size: 1.2rem;
    }
</style>

<div class="register-container">
    <h1 class="page-title">Register</h1>

    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="form-container">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @errorMessage
                        <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                    </div>
                }

                @if (successMessage != null)
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        @successMessage
                        <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
                    </div>
                }

                <EditForm Model="@newMember" OnValidSubmit="@HandleValidSubmit" class="needs-validation">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" />

                    <div class="mb-3">
                        <label for="email" class="form-label">Email:</label>
                        <InputText id="email" class="form-control" @bind-Value="newMember.Email" placeholder="Enter your email" />
                        <ValidationMessage For="@(() => newMember.Email)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="companyName" class="form-label">Company Name:</label>
                        <InputText id="companyName" class="form-control" @bind-Value="newMember.CompanyName" placeholder="Enter company name" />
                        <ValidationMessage For="@(() => newMember.CompanyName)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="city" class="form-label">City:</label>
                        <InputText id="city" class="form-control" @bind-Value="newMember.City" placeholder="Enter city" />
                        <ValidationMessage For="@(() => newMember.City)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="country" class="form-label">Country:</label>
                        <InputText id="country" class="form-control" @bind-Value="newMember.Country" placeholder="Enter country" />
                        <ValidationMessage For="@(() => newMember.Country)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password:</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="newMember.Password" placeholder="Enter password" />
                        <ValidationMessage For="@(() => newMember.Password)" class="text-danger" />
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Registering...</span>
                            }
                            else
                            {
                                <span>Register</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private Member newMember = new Member();
    private string? errorMessage;
    private string? successMessage;
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            errorMessage = null;
            successMessage = null;

            await MemberService.Register(newMember);

            successMessage = "Registration successful! Redirecting to login...";
            await Task.Delay(2000); // Show success message for 2 seconds
            NavigationManager.NavigateTo("/Member/Login");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isSubmitting = false;
        }
    }
}