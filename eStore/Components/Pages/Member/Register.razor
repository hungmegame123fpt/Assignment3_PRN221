@page "/register"
@inject BusinessObject.IService.IMemberService MemberService
@inject NavigationManager NavigationManager
@using DataAccess.Models

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Register</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                        </div>
                    }

                    @if (successMessage != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            @successMessage
                            <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
                        </div>
                    }

                    <EditForm Model="@newMember" OnValidSubmit="@HandleValidSubmit" class="needs-validation">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email:</label>
                            <InputText id="email" class="form-control" @bind-Value="newMember.Email" placeholder="Enter your email" />
                            <ValidationMessage For="@(() => newMember.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="companyName" class="form-label">Company Name:</label>
                            <InputText id="companyName" class="form-control" @bind-Value="newMember.CompanyName" placeholder="Enter company name" />
                            <ValidationMessage For="@(() => newMember.CompanyName)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="city" class="form-label">City:</label>
                            <InputText id="city" class="form-control" @bind-Value="newMember.City" placeholder="Enter city" />
                            <ValidationMessage For="@(() => newMember.City)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="country" class="form-label">Country:</label>
                            <InputText id="country" class="form-control" @bind-Value="newMember.Country" placeholder="Enter country" />
                            <ValidationMessage For="@(() => newMember.Country)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password:</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="newMember.Password" placeholder="Enter password" />
                            <ValidationMessage For="@(() => newMember.Password)" class="text-danger" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Registering...</span>
                                }
                                else
                                {
                                    <span>Register</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Member newMember = new Member();
    private string? errorMessage;
    private string? successMessage;
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            errorMessage = null;
            successMessage = null;

            await MemberService.Register(newMember);

            successMessage = "Registration successful! Redirecting to login...";
            await Task.Delay(2000); // Show success message for 2 seconds
            NavigationManager.NavigateTo("/Member/Login");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isSubmitting = false;
        }
    }
}