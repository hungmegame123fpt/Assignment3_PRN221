@page "/Login"
@using BusinessObject.IService
@using BusinessObject.Service;
@using DataAccess.Models;
@inject IMemberService userService;
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration _configuration
@layout Layout.MainLayout

<div class="login-page">
    <div class="login-wrapper">
        <div class="login-card">
            <div class="login-header">
                <div class="logo-container">
                    <i class="fas fa-lock logo-icon"></i>
                </div>
                <h1>Welcome Back</h1>
                <p class="subtitle">Please enter your credentials to login</p>
            </div>

            <EditForm OnSubmit="LoginProcess" FormName="Login" Model="this" class="login-form">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="email">Email Address</label>
                    <div class="input-group">
                        <span class="input-icon">
                            <i class="fas fa-envelope"></i>
                        </span>
                        <InputText id="email" class="form-input" @bind-Value="Email" placeholder="Enter your email" />
                    </div>
                    <ValidationMessage For="@(() => Email)" class="validation-error" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <div class="input-group">
                        <span class="input-icon">
                            <i class="fas fa-key"></i>
                        </span>
                        <InputText id="password" type="password" class="form-input" @bind-Value="Password" placeholder="Enter your password" />
                    </div>
                    <ValidationMessage For="@(() => Password)" class="validation-error" />
                </div>

                <button type="submit" class="login-button">
                    <span class="button-text">Sign In</span>
                    <i class="fas fa-arrow-right button-icon"></i>
                </button>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">
                        <i class="fas fa-exclamation-circle error-icon"></i>
                        <span>@errorMessage</span>
                    </div>
                }
            </EditForm>

            <div class="login-footer">
                <p>Don't have an account? <a href="/Register" class="footer-link">Sign up</a></p>
            </div>
        </div>
    </div>
</div>

<style>
    /* Base styles */
    .login-page {
        display: flex;
        min-height: 100vh;
        background-color: #f8f9fa;
        font-family: 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', sans-serif;
    }

    .login-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        padding: 2rem;
    }

    /* Card styling */
    .login-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        width: 100%;
        max-width: 420px;
        padding: 2.5rem;
        animation: fadeIn 0.5s ease;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Header section */
    .login-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .logo-container {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, #4361ee, #3a0ca3);
        border-radius: 50%;
        margin-bottom: 1.5rem;
    }

    .logo-icon {
        color: white;
        font-size: 1.5rem;
    }

    .login-header h1 {
        font-size: 1.8rem;
        color: #2b2d42;
        margin-bottom: 0.5rem;
        font-weight: 700;
    }

    .subtitle {
        color: #6c757d;
        font-size: 0.95rem;
        margin: 0;
    }

    /* Form styling */
    .login-form {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

        .form-group label {
            font-size: 0.9rem;
            color: #495057;
            font-weight: 500;
        }

    .input-group {
        position: relative;
        display: flex;
        align-items: center;
    }

    .input-icon {
        position: absolute;
        left: 15px;
        color: #6c757d;
        font-size: 1rem;
    }

    .form-input {
        width: 100%;
        padding: 0.85rem 1rem 0.85rem 2.8rem;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        color: #495057;
    }

        .form-input:focus {
            outline: none;
            border-color: #4361ee;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

    /* Button styling */
    .login-button {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        width: 100%;
        padding: 1rem;
        background: linear-gradient(135deg, #4361ee, #3a0ca3);
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 0.5rem;
    }

        .login-button:hover {
            background: linear-gradient(135deg, #3a0ca3, #4361ee);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(67, 97, 238, 0.3);
        }

    .button-icon {
        transition: transform 0.3s ease;
    }

    .login-button:hover .button-icon {
        transform: translateX(3px);
    }

    /* Error message */
    .error-message {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #dc3545;
        font-size: 0.9rem;
        padding: 0.75rem 1rem;
        background-color: #f8d7da;
        border-radius: 6px;
        margin-top: 0.5rem;
    }

    .error-icon {
        font-size: 1rem;
    }

    .validation-error {
        color: #dc3545;
        font-size: 0.85rem;
        margin-top: 0.25rem;
    }

    /* Footer links */
    .login-footer {
        margin-top: 2rem;
        text-align: center;
        font-size: 0.9rem;
        color: #6c757d;
    }

    .footer-link {
        color: #4361ee;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s ease;
    }

        .footer-link:hover {
            color: #3a0ca3;
            text-decoration: underline;
        }

    /* Responsive adjustments */
    @@media (max-width: 480px) {
        .login-card {
            padding: 2rem 1.5rem;
        }

        .login-header h1 {
            font-size: 1.5rem;
        }
    }
</style>

@code {
    [SupplyParameterFromForm]
    public string Email { get; set; }
    [SupplyParameterFromForm]
    public string Password { get; set; }

    private string? errorMessage;

    private async Task LoginProcess()
    {
        var adminEmail = _configuration["AdminAccount:Email"];
        var adminPassword = _configuration["AdminAccount:Password"];

        if (Email == adminEmail && Password == adminPassword)
        {
            Navigation.NavigateTo($"/Member/AuthProcess?email={Uri.EscapeDataString(Email)}&role=Admin", true);
        }
        else
        {
            var userAccount = await userService.Authenticate(Email, Password);

            if (userAccount != null)
            {
                Navigation.NavigateTo($"/Member/AuthProcess?email={Uri.EscapeDataString(userAccount.Email)}&role=Member&memberId={Uri.EscapeDataString(userAccount.MemberId.ToString())}", true);
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
            }
        }
    }
}