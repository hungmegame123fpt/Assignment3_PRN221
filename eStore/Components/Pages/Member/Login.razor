@page "/Login"

@using BusinessObject.IService
@using BusinessObject.Service;
@using DataAccess.Models;

@inject IMemberService userService;
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration _configuration
@layout Layout.MainLayout

<div class="login-container">
    <div class="login-card">
        <h1>Login</h1>
        <p class="text-muted">Please log in to continue</p>

        <EditForm OnSubmit="LoginProcess" FormName="Login" Model="this">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email:</label>
                <InputText id="email" class="form-control" @bind-Value="Email" />
                <ValidationMessage For="@(() => Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="Password" />
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>

            <div class="form-group">
                <p class="text-danger">@errorMessage</p>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">@errorMessage</div>
        }
    </div>
</div>


@code {
    [SupplyParameterFromForm]
    public string Email { get; set; }
    [SupplyParameterFromForm]
    public string Password { get; set; }

    private string? errorMessage;

    private async Task LoginProcess()
    {
        errorMessage = string.Empty;

        if (Email == adminEmail && Password == adminPassword)
        {
            Navigation.NavigateTo($"/Member/AuthProcess?email={Uri.EscapeDataString(Email)}&role=Admin", true);
        }
        else
        {
            var userAccount = await userService.Authenticate(Email, Password);

            if (userAccount != null)
            {
                Navigation.NavigateTo($"/Member/AuthProcess?email={Uri.EscapeDataString(userAccount.Email)}&role=Member&memberId={Uri.EscapeDataString(userAccount.MemberId.ToString())}", true);
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
            }
        }
    }

}

