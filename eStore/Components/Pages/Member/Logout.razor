@page "/logout"
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime

@code {
    private bool isLoggedOut = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Log out the user by clearing cookies
            await HttpContextAccessor.HttpContext.SignOutAsync(Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationDefaults.AuthenticationScheme);
            isLoggedOut = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isLoggedOut)
        {
            try
            {
                // Clear cookies in the browser after the component has been rendered
                await JSRuntime.InvokeVoidAsync("eval", "document.cookie.split(';').forEach(function(c) { document.cookie = c.trim().split('=')[0] + '=; expires=' + new Date(0).toUTCString(); });");

                // Redirect user to login page
                Navigation.NavigateTo("/login");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during JSInterop or navigation: {ex.Message}");
            }
        }
    }
}
