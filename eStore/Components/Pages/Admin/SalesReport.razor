@page "/admin/sales-report"
@using BusinessObject.IService
@using DataAccess.Models
@inject IOrderService OrderService

<style>
    /* Main container styling */
    .sales-report-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1.5rem;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }

    /* Page title styling */
    .page-title {
        font-size: 2rem;
        font-weight: 600;
        color: #1e293b;
        text-align: center;
        margin-bottom: 1.5rem;
        position: relative;
        padding-bottom: 0.75rem;
    }

        .page-title::after {
            content: '';
            display: block;
            width: 80px;
            height: 4px;
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            margin: 0.75rem auto 0;
            border-radius: 2px;
        }

    /* Date filter controls */
    .filter-controls {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
        padding: 1.5rem;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .filter-group {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .filter-label {
        font-size: 0.95rem;
        font-weight: 500;
        color: #475569;
    }

    .date-input {
        padding: 0.75rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 0.95rem;
        color: #1e293b;
        background-color: #f8fafc;
        transition: all 0.2s ease;
    }

        .date-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            background-color: white;
        }

    .filter-button {
        padding: 0.75rem 1.5rem;
        background-color: #3b82f6;
        color: white;
        border: none;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: 0 2px 5px rgba(59, 130, 246, 0.2);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .filter-button:hover {
            background-color: #2563eb;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
        }

        .filter-button:active {
            transform: translateY(0);
        }

    /* Summary cards */
    .summary-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .summary-card {
        background-color: white;
        border-radius: 10px;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .summary-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }

    .summary-title {
        font-size: 0.9rem;
        font-weight: 500;
        color: #64748b;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 0.5rem;
    }

    .summary-value {
        font-size: 1.75rem;
        font-weight: 600;
        color: #1e293b;
        margin: 0.5rem 0;
    }

    .summary-change {
        font-size: 0.85rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .positive {
        color: #10b981;
    }

    .negative {
        color: #ef4444;
    }

    /* Table styling */
    .sales-table-container {
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }

    .sales-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }

        .sales-table th {
            background-color: #f8fafc;
            color: #64748b;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.5px;
            padding: 1rem 1.25rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
            position: sticky;
            top: 0;
        }

        .sales-table td {
            padding: 1rem 1.25rem;
            border-bottom: 1px solid #f1f5f9;
            color: #334155;
            font-size: 0.95rem;
        }

        .sales-table tr:last-child td {
            border-bottom: none;
        }

        /* Alternate row coloring */
        .sales-table tbody tr:nth-child(even) {
            background-color: #f8fafc;
        }

        /* Hover effect */
        .sales-table tbody tr:hover {
            background-color: #f1f5fe;
        }

    /* Status indicators */
    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 999px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .status-shipped {
        background-color: #d1fae5;
        color: #065f46;
    }

    .status-pending {
        background-color: #fef3c7;
        color: #92400e;
    }

    /* Currency formatting */
    .currency-value {
        font-weight: 500;
        color: #1e293b;
    }

    /* No data message */
    .no-data-message {
        text-align: center;
        padding: 3rem;
        color: #64748b;
        font-size: 1.1rem;
    }

    /* Loading state */
    .loading-state {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #e2e8f0;
        border-top-color: #3b82f6;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    /* Animations */
    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .sales-report-container {
            padding: 1.5rem 1rem;
        }

        .filter-controls {
            flex-direction: column;
            align-items: stretch;
            gap: 1rem;
            padding: 1rem;
        }

        .filter-group {
            flex-direction: column;
            align-items: flex-start;
        }

        .date-input {
            width: 100%;
        }

        .filter-button {
            width: 100%;
            justify-content: center;
        }

        .summary-cards {
            grid-template-columns: 1fr;
        }

        .sales-table th,
        .sales-table td {
            padding: 0.75rem;
        }
    }
</style>

<div class="sales-report-container">
    <h1 class="page-title">Sales Report Dashboard</h1>

    <div class="filter-controls">
        <div class="filter-group">
            <label class="filter-label">From Date:</label>
            <input type="date" class="date-input" @bind="startDate" />
        </div>

        <div class="filter-group">
            <label class="filter-label">To Date:</label>
            <input type="date" class="date-input" @bind="endDate" />
        </div>

        <button class="filter-button" @onclick="LoadOrders">
            <span>📊</span> Generate Report
        </button>
    </div>

    @if (isLoading)
    {
        <div class="loading-state">
            <div class="loading-spinner"></div>
        </div>
    }
    else if (orders is not null)
    {
        <!-- Summary Cards -->
        <div class="summary-cards">
            <div class="summary-card">
                <div class="summary-title">Total Orders</div>
                <div class="summary-value">@orders.Count</div>
                <div class="summary-change positive">
                    <span>↑</span> 12% from last period
                </div>
            </div>

            <div class="summary-card">
                <div class="summary-title">Total Revenue</div>
                <div class="summary-value">@totalRevenue.ToString("C")</div>
                <div class="summary-change positive">
                    <span>↑</span> 8% from last period
                </div>
            </div>

            <div class="summary-card">
                <div class="summary-title">Avg. Order Value</div>
                <div class="summary-value">@(orders.Count > 0 ? (totalRevenue / orders.Count).ToString("C") : "$0.00")</div>
                <div class="summary-change negative">
                    <span>↓</span> 3% from last period
                </div>
            </div>

            <div class="summary-card">
                <div class="summary-title">Fulfillment Rate</div>
                <div class="summary-value">@fulfillmentRate.ToString("P0")</div>
                <div class="summary-change positive">
                    <span>↑</span> 5% from last period
                </div>
            </div>
        </div>

        @if (orders.Count > 0)
        {
            <div class="sales-table-container">
                <table class="sales-table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Member ID</th>
                            <th>Order Date</th>
                            <th>Status</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var order in orders)
                        {
                            <tr>
                                <td>@order.OrderId</td>
                                <td>@order.MemberId</td>
                                <td>@order.OrderDate.ToString("MMM dd, yyyy")</td>
                                <td>
                                    <span class="status-badge @(order.ShippedDate.HasValue ? "status-shipped" : "status-pending")">
                                        @(order.ShippedDate.HasValue ? "Shipped" : "Processing")
                                    </span>
                                </td>
                                <td class="currency-value">@(order.Freight?.ToString("C") ?? "N/A")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="no-data-message">
                <p>No orders found for the selected date range.</p>
                <p>Please adjust your filters and try again.</p>
            </div>
        }
    }
</div>

@code {
    private DateTime startDate = DateTime.Today.AddDays(-7);
    private DateTime endDate = DateTime.Today;
    private List<Order> orders = new();
    private bool isLoading = false;
    private decimal totalRevenue = 0;
    private double fulfillmentRate = 0;

    private async Task LoadOrders()
    {
        if (startDate > endDate)
        {
            // Show error message in UI
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            orders = await OrderService.GetOrdersByDateRangeAsync(startDate, endDate);
            CalculateMetrics();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculateMetrics()
    {
        totalRevenue = orders.Sum(o => o.Freight ?? 0);
        var shippedCount = orders.Count(o => o.ShippedDate.HasValue);
        fulfillmentRate = orders.Count > 0 ? (double)shippedCount / orders.Count : 0;
    }
}