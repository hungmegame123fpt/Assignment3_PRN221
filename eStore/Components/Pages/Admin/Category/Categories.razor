@page "/categories"
@inject ICategoryService CategoryService
@inject NavigationManager Navigation
@using DataAccess.Models
@using BusinessObject.IService

<style>
    /* Main container styling */
    .category-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1.5rem;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }

    /* Page title styling */
    .page-title {
        font-size: 2rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 1.5rem;
        position: relative;
        padding-bottom: 0.75rem;
    }

        .page-title::after {
            content: '';
            display: block;
            width: 60px;
            height: 4px;
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            position: absolute;
            bottom: 0;
            left: 0;
            border-radius: 2px;
        }

    /* Create button */
    .create-btn {
        background-color: #3b82f6;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: 0 2px 5px rgba(59, 130, 246, 0.2);
        margin-bottom: 1.5rem;
    }

        .create-btn:hover {
            background-color: #2563eb;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
        }

        .create-btn:active {
            transform: translateY(0);
        }

    /* Table styling */
    .category-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        background-color: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

        .category-table th {
            background-color: #f8fafc;
            color: #64748b;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.5px;
            padding: 1rem 1.25rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .category-table td {
            padding: 1rem 1.25rem;
            border-bottom: 1px solid #f1f5f9;
            color: #334155;
            font-size: 0.95rem;
        }

        .category-table tr:last-child td {
            border-bottom: none;
        }

        /* Alternate row coloring */
        .category-table tbody tr:nth-child(even) {
            background-color: #f8fafc;
        }

        /* Hover effect */
        .category-table tbody tr:hover {
            background-color: #f1f5fe;
        }

    /* Action buttons */
    .action-btn {
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-size: 0.85rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        border: none;
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
    }

    .edit-btn {
        background-color: #fef9c3;
        color: #d97706;
    }

        .edit-btn:hover {
            background-color: #fef08a;
        }

    .delete-btn {
        background-color: #fee2e2;
        color: #dc2626;
        margin-left: 0.5rem;
    }

        .delete-btn:hover {
            background-color: #fecaca;
        }

    /* Modal styling */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 500px;
        overflow: hidden;
        animation: modalFadeIn 0.3s ease-out;
    }

    .modal-header {
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid #e2e8f0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1e293b;
        margin: 0;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #64748b;
        padding: 0.25rem;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.25rem;
    }

    .form-label {
        display: block;
        font-size: 0.875rem;
        font-weight: 500;
        color: #64748b;
        margin-bottom: 0.5rem;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        font-size: 1rem;
        color: #1e293b;
        background-color: #f8fafc;
        transition: all 0.2s ease;
    }

        .form-control:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            background-color: white;
        }

        .form-control[disabled] {
            background-color: #f1f5f9;
            color: #94a3b8;
        }

    textarea.form-control {
        min-height: 100px;
        resize: vertical;
    }

    .modal-footer {
        padding: 1.25rem 1.5rem;
        border-top: 1px solid #e2e8f0;
        display: flex;
        justify-content: flex-end;
        gap: 0.75rem;
    }

    .secondary-btn {
        background-color: #f1f5f9;
        color: #64748b;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.25rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .secondary-btn:hover {
            background-color: #e2e8f0;
        }

    .primary-btn {
        background-color: #3b82f6;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.25rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .primary-btn:hover {
            background-color: #2563eb;
        }

    .danger-btn {
        background-color: #ef4444;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 1.25rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .danger-btn:hover {
            background-color: #dc2626;
        }

    /* Loading state */
    .loading-state {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #e2e8f0;
        border-top-color: #3b82f6;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    /* Animations */
    @@keyframes modalFadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .category-container {
            padding: 1.5rem 1rem;
        }

        .page-title {
            font-size: 1.75rem;
        }

        .category-table th,
        .category-table td {
            padding: 0.75rem 1rem;
        }

        .action-btn {
            padding: 0.5rem 0.75rem;
            font-size: 0.8rem;
        }

        .modal-content {
            margin: 0 1rem;
        }
    }
</style>

<div class="category-container">
    <h1 class="page-title">Category Management</h1>

    @if (categories == null)
    {
        <div class="loading-state">
            <div class="loading-spinner"></div>
        </div>
    }
    else
    {
        <button class="create-btn" @onclick="ShowCreateModal">
            <span>+</span> Create New Category
        </button>

        <table class="category-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in categories)
                {
                    <tr>
                        <td>@category.CategoryId</td>
                        <td>@category.CategoryName</td>
                        <td>@category.Description</td>
                        <td>
                            <button class="action-btn edit-btn" @onclick="() => ShowEditModal(category)">
                                <span>✏️</span> Edit
                            </button>
                            <button class="action-btn delete-btn" @onclick="() => ShowDeleteModal(category)">
                                <span>🗑️</span> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Create/Edit Modal -->
        @if (showModal)
        {
            <div class="modal-overlay">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isEditMode ? "Edit Category" : "Create Category")</h5>
                        <button class="close-btn" @onclick="HideModal">×</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label class="form-label">Category ID</label>
                            <input type="number" class="form-control" @bind="currentCategory.CategoryId" disabled="@isEditMode" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Category Name</label>
                            <input type="text" class="form-control" @bind="currentCategory.CategoryName" />
                        </div>
                        <div class="form-group">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" @bind="currentCategory.Description"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="secondary-btn" @onclick="HideModal">Close</button>
                        <button class="primary-btn" @onclick="SaveCategory">@(isEditMode ? "Update" : "Create")</button>
                    </div>
                </div>
            </div>
        }

        <!-- Delete Confirmation Modal -->
        @if (showDeleteModal)
        {
            <div class="modal-overlay">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button class="close-btn" @onclick="HideDeleteModal">×</button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete category <strong>"@currentCategory?.CategoryName"</strong>?</p>
                        <p class="text-muted">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button class="secondary-btn" @onclick="HideDeleteModal">Cancel</button>
                        <button class="danger-btn" @onclick="DeleteCategory">Delete</button>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    private IEnumerable<Category> categories;
    private Category currentCategory = new();
    private bool showModal = false;
    private bool showDeleteModal = false;
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        categories = await CategoryService.GetAllCategoriesAsync();
    }

    private void ShowCreateModal()
    {
        currentCategory = new Category();
        isEditMode = false;
        showModal = true;
    }

    private void ShowEditModal(Category category)
    {
        currentCategory = new Category
            {
                CategoryId = category.CategoryId,
                CategoryName = category.CategoryName,
                Description = category.Description
            };
        isEditMode = true;
        showModal = true;
    }

    private void ShowDeleteModal(Category category)
    {
        currentCategory = category;
        showDeleteModal = true;
    }

    private void HideModal()
    {
        showModal = false;
    }

    private void HideDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task SaveCategory()
    {
        try
        {
            if (isEditMode)
            {
                await CategoryService.UpdateCategoryAsync(currentCategory);
            }
            else
            {
                await CategoryService.CreateCategoryAsync(currentCategory);
            }
            await LoadCategories();
            HideModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving category: {ex.Message}");
        }
    }

    private async Task DeleteCategory()
    {
        try
        {
            await CategoryService.DeleteCategoryAsync(currentCategory.CategoryId);
            await LoadCategories();
            HideDeleteModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting category: {ex.Message}");
        }
    }
}