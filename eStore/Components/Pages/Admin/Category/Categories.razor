@page "/categories"
@inject ICategoryService CategoryService
@inject NavigationManager Navigation

@using DataAccess.Models
@using BusinessObject.IService

<h3>Category List</h3>

@if (categories == null)
{
    <p>Loading...</p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="ShowCreateModal">Create New Category</button>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.CategoryId</td>
                    <td>@category.CategoryName</td>
                    <td>@category.Description</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => ShowEditModal(category)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ShowDeleteModal(category)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Create/Edit Modal -->
    <div class="modal fade @(showModal ? "show d-block" : "")" tabindex="-1" style="@(showModal ? "background-color: rgba(0,0,0,0.5);" : "")">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditMode ? "Edit Category" : "Create Category")</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Category ID</label>
                        <input type="number" class="form-control" @bind="currentCategory.CategoryId" disabled="@isEditMode" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Category Name</label>
                        <input type="text" class="form-control" @bind="currentCategory.CategoryName" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" @bind="currentCategory.Description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveCategory">@(isEditMode ? "Update" : "Create")</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade @(showDeleteModal ? "show d-block" : "")" tabindex="-1" style="@(showDeleteModal ? "background-color: rgba(0,0,0,0.5);" : "")">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete category "@currentCategory?.CategoryName"?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteCategory">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<Category> categories;
    private Category currentCategory = new();
    private bool showModal = false;
    private bool showDeleteModal = false;
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        categories = await CategoryService.GetAllCategoriesAsync();
    }

    private void ShowCreateModal()
    {
        currentCategory = new Category();
        isEditMode = false;
        showModal = true;
    }

    private void ShowEditModal(Category category)
    {
        currentCategory = new Category
            {
                CategoryId = category.CategoryId,
                CategoryName = category.CategoryName,
                Description = category.Description
            };
        isEditMode = true;
        showModal = true;
    }

    private void ShowDeleteModal(Category category)
    {
        currentCategory = category;
        showDeleteModal = true;
    }

    private void HideModal()
    {
        showModal = false;
    }

    private void HideDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task SaveCategory()
    {
        try
        {
            if (isEditMode)
            {
                await CategoryService.UpdateCategoryAsync(currentCategory);
            }
            else
            {
                await CategoryService.CreateCategoryAsync(currentCategory);
            }
            await LoadCategories();
            HideModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving category: {ex.Message}");
        }
    }

    private async Task DeleteCategory()
    {
        try
        {
            await CategoryService.DeleteCategoryAsync(currentCategory.CategoryId);
            await LoadCategories();
            HideDeleteModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting category: {ex.Message}");
        }
    }
}