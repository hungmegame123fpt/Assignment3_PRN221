@using DataAccess.Models
@using BusinessObject.IService
@using System.ComponentModel.DataAnnotations;
@page "/product/{id:int?}"
@inject IProductsService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager Navigation

<style>
    /* Main container styling */
    .product-form-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Page title styling */
    .page-title {
        font-size: 2.25rem;
        font-weight: 600;
        color: #2c3e50;
        text-align: center;
        margin-bottom: 1.5rem;
        position: relative;
    }

        .page-title::after {
            content: '';
            display: block;
            width: 80px;
            height: 4px;
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            margin: 0.75rem auto 0;
            border-radius: 2px;
        }

    /* Form container */
    .form-container {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        padding: 2rem;
    }

    /* Form styling */
    .form-label {
        font-weight: 600;
        color: #2c3e50;
    }

    .form-control {
        margin-bottom: 1rem;
        padding: 0.75rem;
        border-radius: 8px;
        border: 1px solid #e2e8f0;
        font-size: 1rem;
        color: #2c3e50;
    }

        .form-control:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
        }

    .btn-success {
        display: inline-flex;
        align-items: center;
        padding: 0.75rem 1.5rem;
        background-color: #10b981;
        color: white;
        border-radius: 8px;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.2s ease;
        box-shadow: 0 2px 5px rgba(16, 185, 129, 0.2);
        border: none;
    }

        .btn-success:hover {
            background-color: #059669;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);
        }

        .btn-success:active {
            transform: translateY(0);
        }

    .btn-danger {
        display: inline-flex;
        align-items: center;
        padding: 0.75rem 1.5rem;
        background-color: #ef4444;
        color: white;
        border-radius: 8px;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.2s ease;
        box-shadow: 0 2px 5px rgba(239, 68, 68, 0.2);
        border: none;
    }

        .btn-danger:hover {
            background-color: #dc2626;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(239, 68, 68, 0.3);
        }

        .btn-danger:active {
            transform: translateY(0);
        }

    .back-link {
        display: inline-block;
        margin-top: 1rem;
        color: #3b82f6;
        text-decoration: none;
        font-weight: 500;
    }

        .back-link:hover {
            text-decoration: underline;
        }
</style>

<div class="product-form-container">
    <h1 class="page-title">@(product.ProductId == 0 ? "🆕 Add New Product" : "✏️ Edit Product")</h1>

    <div class="form-container">
        <EditForm Model="product" OnValidSubmit="SaveProduct">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="row">
                <!-- Product Name -->
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label"><strong>📌 Product Name</strong></label>
                        <InputText class="form-control" @bind-Value="product.ProductName" placeholder="Enter product name..." />
                        <ValidationMessage For="@(() => product.ProductName)" class="text-danger" />
                    </div>
                </div>

                <!-- Category Dropdown -->
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label"><strong>🗂 Category</strong></label>
                        <InputSelect class="form-control" @bind-Value="product.CategoryId">
                            <option value="">-- Select Category --</option>
                            @foreach (var category in categoryList)
                            {
                                <option value="@category.CategoryId">@category.CategoryName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => product.CategoryId)" class="text-danger" />
                    </div>
                </div>
            </div>

            <div class="row">
                <!-- Weight -->
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label"><strong>⚖️ Weight</strong></label>
                        <InputText class="form-control" @bind-Value="product.Weight" placeholder="Enter weight..." />
                        <ValidationMessage For="@(() => product.Weight)" class="text-danger" />
                    </div>
                </div>

                <!-- Unit Price -->
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label"><strong>💰 Unit Price ($)</strong></label>
                        <InputNumber class="form-control" @bind-Value="product.UnitPrice" placeholder="Enter price..." min="0.01" />
                        <ValidationMessage For="@(() => product.UnitPrice)" class="text-danger" />
                    </div>
                </div>

                <!-- Units in Stock -->
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="form-label"><strong>📦 Units in Stock</strong></label>
                        <InputNumber class="form-control" @bind-Value="product.UnitsInStock" placeholder="Enter stock count..." min="1" />
                        <ValidationMessage For="@(() => product.UnitsInStock)" class="text-danger" />
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="text-center mt-4">
                <button type="submit" class="btn btn-success me-3">
                    <i class="bi bi-check-circle"></i> Save
                </button>
                <button type="button" class="btn btn-danger" @onclick="Cancel">
                    <i class="bi bi-x-circle"></i> Cancel
                </button>
            </div>
        </EditForm>
    </div>

    <a href="/products" class="back-link">Back to List</a>
</div>

@code {
    private Product product = new();
    private List<Category> categoryList = new();

    [Parameter] public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        categoryList = (await CategoryService.GetAllCategoriesAsync()).ToList();

        if (Id.HasValue && Id.Value > 0)
        {
            var existingProduct = await ProductService.GetProductByIdAsync(Id.Value);
            if (existingProduct != null)
            {
                product = existingProduct;
            }
        }
    }

    private async Task SaveProduct()
    {
        if (product.ProductId == 0)
            await ProductService.AddProductAsync(product);
        else
            await ProductService.UpdateProductAsync(product);

        Navigation.NavigateTo("/products");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/products");
    }
}