@using DataAccess.Models
@using BusinessObject.IService
@page "/products"
@inject IProductsService ProductService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<style>
    /* Main container styling */
    .product-list-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Page title styling */
    .page-title {
        font-size: 2.25rem;
        font-weight: 600;
        color: #2c3e50;
        text-align: center;
        margin-bottom: 1.5rem;
        position: relative;
    }

        .page-title::after {
            content: '';
            display: block;
            width: 80px;
            height: 4px;
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
            margin: 0.75rem auto 0;
            border-radius: 2px;
        }

    /* Button styling */
    .btn-success {
        display: inline-flex;
        align-items: center;
        padding: 0.75rem 1.5rem;
        background-color: #10b981;
        color: white;
        border-radius: 8px;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.2s ease;
        box-shadow: 0 2px 5px rgba(16, 185, 129, 0.2);
        border: none;
    }

        .btn-success:hover {
            background-color: #059669;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);
        }

        .btn-success:active {
            transform: translateY(0);
        }

    .btn-primary {
        display: inline-flex;
        align-items: center;
        padding: 0.5rem 1rem;
        background-color: #3b82f6;
        color: white;
        border-radius: 8px;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.2s ease;
        box-shadow: 0 2px 5px rgba(59, 130, 246, 0.2);
        border: none;
    }

        .btn-primary:hover {
            background-color: #2563eb;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
        }

        .btn-primary:active {
            transform: translateY(0);
        }

    .btn-danger {
        display: inline-flex;
        align-items: center;
        padding: 0.5rem 1rem;
        background-color: #ef4444;
        color: white;
        border-radius: 8px;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.2s ease;
        box-shadow: 0 2px 5px rgba(239, 68, 68, 0.2);
        border: none;
    }

        .btn-danger:hover {
            background-color: #dc2626;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(239, 68, 68, 0.3);
        }

        .btn-danger:active {
            transform: translateY(0);
        }

    .table-container {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        overflow: hidden;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th {
            background-color: #f8fafc;
            color: #64748b;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.75rem;
            letter-spacing: 0.5px;
            padding: 1rem 1.5rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
            position: sticky;
            top: 0;
        }

        .table td {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #f1f5f9;
            color: #334155;
            font-size: 0.95rem;
        }

        .table tr:last-child td {
            border-bottom: none;
        }

        /* Alternate row coloring */
        .table tbody tr:nth-child(even) {
            background-color: #f8fafc;
        }

        /* Hover effect */
        .table tbody tr:hover {
            background-color: #f1f5fe;
        }

    .loading-text {
        color: #718096;
        font-style: italic;
        text-align: center;
        margin: 50px 0;
        font-size: 1.2rem;
    }
</style>

<div class="product-list-container">
    <h1 class="page-title"><i class="bi bi-box-seam"></i> Product List</h1>

    <div class="d-flex justify-content-between align-items-center mb-4">
        <button class="btn btn-success" @onclick="@(() => Navigation.NavigateTo("/product"))">
            <i class="bi bi-plus-circle"></i> Create Product
        </button>
    </div>

    <div class="card shadow-sm border-0 mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-5 mb-2">
                    <input type="text" class="form-control" placeholder="🔎 Search by Product Name..." @bind="SearchTerm" />
                </div>
                <div class="col-md-5 mb-2">
                    <input type="number" class="form-control" placeholder="💰 Filter by Price..." @bind="SearchPrice" />
                </div>
            </div>
        </div>
    </div>

    <div class="table-container">
        <table class="table table-hover">
            <thead class="table-dark">
                <tr>
                    <th>#</th>
                    <th>📌 Product Name</th>
                    <th>🗂 Category</th>
                    <th>⚖️ Weight</th>
                    <th>💰 Unit Price ($)</th>
                    <th>📦 Stock</th>
                    <th>🔧 Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (filteredProducts.Count == 0)
                {
                    <tr>
                        <td colspan="7" class="text-center text-muted py-3">No products found.</td>
                    </tr>
                }
                else
                {
                    @foreach (var product in filteredProducts)
                    {
                        <tr class="@(product.UnitsInStock == 0 ? "table-danger" : "table-light")">
                            <td>@product.ProductId</td>
                            <td>@product.ProductName</td>
                            <td>@product.Category.CategoryName</td>
                            <td>@product.Weight</td>
                            <td>$@product.UnitPrice.ToString("F2")</td>
                            <td>@(product.UnitsInStock > 0 ? product.UnitsInStock : "Out of Stock")</td>
                            <td>
                                <button class="btn btn-primary btn-sm rounded-pill me-2" @onclick="() => EditProduct(product.ProductId)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-danger btn-sm rounded-pill" @onclick="() => DeleteProduct(product.ProductId)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Product> productList = new();
    private List<Product> filteredProducts = new();
    private string searchTerm = "";
    private decimal? searchPrice;
    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterProducts();
        }
    }

    private decimal? SearchPrice
    {
        get => searchPrice;
        set
        {
            searchPrice = value;
            FilterProducts();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        productList = (await ProductService.GetAllProductsAsync()).ToList();
        filteredProducts = productList;
    }

    private void FilterProducts()
    {
        filteredProducts = productList
            .Where(p => (string.IsNullOrEmpty(searchTerm) || p.ProductName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                        (!searchPrice.HasValue || p.UnitPrice <= searchPrice.Value))
            .ToList();
    }

    private void EditProduct(int productId)
    {
        Navigation.NavigateTo($"/product/{productId}");
    }

    private async Task DeleteProduct(int productId)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?");
        if (confirm)
        {
            await ProductService.DeleteProductAsync(productId);
            productList = (await ProductService.GetAllProductsAsync()).ToList();
            FilterProducts();
        }
    }
}